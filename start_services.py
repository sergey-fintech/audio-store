#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ audio-store
"""

import subprocess
import sys
import os
import time
import signal
import threading
import socket
import psutil
from pathlib import Path

class ServiceManager:
    def __init__(self):
        self.processes = []
        self.base_dir = Path(__file__).parent
        self.services = {
            "auth": {"port": 8001, "dir": "services/auth", "script": "run_app.py"},
            "catalog": {"port": 8002, "dir": "services/catalog", "script": "run_app.py"},
            "orders": {"port": 8003, "dir": "services/orders", "script": "run_app.py"},
            "cart": {"port": 8004, "dir": "services/cart", "script": "run_app.py"},
            "recommender": {"port": 8005, "dir": "services/recommender", "script": "run_app.py"},
            "prompts-manager": {"port": 8006, "dir": "services/prompts-manager", "script": "run_app.py"},
            "web": {"port": 8000, "dir": "src", "script": "-m http.server 8000"}
        }
        
    def check_directories(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        missing_dirs = []
        
        for service_name, config in self.services.items():
            if service_name == "web":
                continue  # web —Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç src –ø–∞–ø–∫—É
            service_dir = self.base_dir / config["dir"]
            if not service_dir.exists():
                missing_dirs.append(str(service_dir))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É src
        src_dir = self.base_dir / "src"
        if not src_dir.exists():
            missing_dirs.append(str(src_dir))
        
        if missing_dirs:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞–ø–∫–∏:")
            for dir_path in missing_dirs:
                print(f"   ‚Ä¢ {dir_path}")
            return False
        
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –Ω–∞–π–¥–µ–Ω—ã")
        return True
    
    def kill_processes_on_ports(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç–∞—Ö 8000-8006"""
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç–∞—Ö 8000-8006...")
        ports = [8000, 8001, 8002, 8003, 8004, 8005, 8006]
        
        for port in ports:
            try:
                for conn in psutil.net_connections():
                    if conn.laddr.port == port and conn.status == psutil.CONN_LISTEN:
                        try:
                            process = psutil.Process(conn.pid)
                            process.terminate()
                            print(f"   ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É {port} (PID: {conn.pid})")
                        except (psutil.NoSuchProcess, psutil.AccessDenied):
                            pass
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        time.sleep(2)
    
    def start_service(self, service_name, config):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ {service_name}...")
        service_dir = self.base_dir / config["dir"]
        
        try:
            if service_name == "web":
                # –î–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É
                if os.name == 'nt':  # Windows
                    process = subprocess.Popen(
                        ["cmd", "/c", "start", "Web Server", "cmd", "/k", 
                         f"cd /d {service_dir} && python -m http.server 8000"],
                        cwd=service_dir
                    )
                else:  # Linux/Mac
                    process = subprocess.Popen(
                        [sys.executable, "-m", "http.server", "8000"],
                        cwd=service_dir,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True
                    )
            else:
                # –î–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
                if os.name == 'nt':  # Windows
                    process = subprocess.Popen(
                        ["cmd", "/c", "start", f"{service_name.title()} Service", "cmd", "/k", 
                         f"cd /d {service_dir} && python {config['script']}"],
                        cwd=service_dir
                    )
                else:  # Linux/Mac
                    process = subprocess.Popen(
                        [sys.executable, config["script"]],
                        cwd=service_dir,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True
                    )
            
            self.processes.append((service_name, process))
            print(f"‚úÖ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å {service_name} –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {config['port']}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ {service_name}: {e}")
            return False
    
    def check_ports(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤"""
        ports_to_check = [config["port"] for config in self.services.values()]
        available_ports = []
        
        for port in ports_to_check:
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.settimeout(1)
                    result = s.connect_ex(('localhost', port))
                    if result == 0:
                        available_ports.append(port)
            except:
                pass
        
        return available_ports
    
    def check_service_health(self, port):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ HTTP"""
        try:
            import urllib.request
            import urllib.error
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
            if port == 8000:  # Web server
                url = f"http://localhost:{port}/index.html"
            else:  # API services
                url = f"http://localhost:{port}/health"
            
            with urllib.request.urlopen(url, timeout=3) as response:
                return response.status == 200
        except Exception as e:
            # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
            # print(f"Health check failed for port {port}: {e}")
            return False
    
    def wait_for_services(self, services_to_check=None, timeout=60):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        start_time = time.time()
        
        if services_to_check is None:
            expected_ports = [config["port"] for config in self.services.values()]
        else:
            expected_ports = [self.services[service]["port"] for service in services_to_check]
        
        while time.time() - start_time < timeout:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã
            available_ports = self.check_ports()
            if len(available_ports) >= len(expected_ports):
                # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ HTTP –∑–∞–ø—Ä–æ—Å—ã
                healthy_services = []
                for port in expected_ports:
                    if self.check_service_health(port):
                        healthy_services.append(port)
                
                if len(healthy_services) >= len(expected_ports):
                    print(f"‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã! –ü–æ—Ä—Ç—ã: {healthy_services}")
                    return True
                else:
                    print(f"‚è≥ –ü–æ—Ä—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã: {available_ports}, –≥–æ—Ç–æ–≤—ã: {healthy_services}")
            else:
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–æ–≤... –û—Ç–∫—Ä—ã—Ç–æ: {len(available_ports)}/{len(expected_ports)}")
            
            time.sleep(2)
        
        print("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ—Ä—Ç—ã: {expected_ports}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã: {self.check_ports()}")
        return False
    
    def open_browser(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            import webbrowser
            print("üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
            webbrowser.open("http://localhost:8000/index.html")
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    def run(self, minimal=False):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print("üéµ –ó–∞–ø—É—Å–∫ Audio Store...")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
        if not self.check_directories():
            return False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞—Ö
        self.kill_processes_on_ports()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
        if minimal:
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä: —Ç–æ–ª—å–∫–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –∫–∞—Ç–∞–ª–æ–≥
            services_to_run = ["web", "catalog"]
            print("\nüöÄ –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (–≤–µ–±-—Å–µ—Ä–≤–µ—Ä + –∫–∞—Ç–∞–ª–æ–≥)...")
        else:
            # –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã
            services_to_run = list(self.services.keys())
            print("\nüöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        services_started = []
        
        for service_name in services_to_run:
            config = self.services[service_name]
            if self.start_service(service_name, config):
                services_started.append(service_name)
                time.sleep(3)  # –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å {service_name}")
        
        if len(services_started) != len(services_to_run):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã")
            self.cleanup()
            return False
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        if self.wait_for_services(services_to_run):
            print("\n" + "=" * 50)
            print("üéâ Audio Store —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:")
            print("   üåê –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://localhost:8000/index.html")
            print("   ‚öôÔ∏è  –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:8000/admin/admin.html")
            print("   üîê API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: http://localhost:8001/docs")
            print("   üìö API –∫–∞—Ç–∞–ª–æ–≥–∞: http://localhost:8002/docs")
            print("   üì¶ API –∑–∞–∫–∞–∑–æ–≤: http://localhost:8003/docs")
            print("   üõí API –∫–æ—Ä–∑–∏–Ω—ã: http://localhost:8004/docs")
            print("   ü§ñ API —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: http://localhost:8005/docs")
            print("   üìù API –ø—Ä–æ–º–ø—Ç–æ–≤: http://localhost:8006/docs")
            print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            print("=" * 50)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            self.open_browser()
            
            # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
                self.cleanup()
                return True
        else:
            self.cleanup()
            return False
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        print("üßπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        for name, process in self.processes:
            try:
                process.terminate()
                process.wait(timeout=5)
                print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                process.kill()
                print(f"‚ö†Ô∏è {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ Audio Store')
    parser.add_argument('--minimal', action='store_true', 
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –∫–∞—Ç–∞–ª–æ–≥ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)')
    
    args = parser.parse_args()
    
    manager = ServiceManager()
    success = manager.run(minimal=args.minimal)
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main() 