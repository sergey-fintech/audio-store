#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ '–ó–∞–∫–∞–∑—ã'
"""

import asyncio
import httpx
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
if __name__ == "__main__":
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –º–æ–¥—É–ª—å, –ø—É—Ç—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

async def test_orders_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤"""
    
    # URL –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –∑–∞–∫–∞–∑–æ–≤
    orders_url = "http://localhost:8003"
    
    print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ '–ó–∞–∫–∞–∑—ã'")
    print("=" * 60)
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
        print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ health check...")
        try:
            response = await client.get(f"{orders_url}/health")
            if response.status_code == 200:
                print("‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   –°—Ç–∞—Ç—É—Å: {response.json()}")
            else:
                print(f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É: {str(e)}")
            return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...")
        try:
            response = await client.get(f"{orders_url}/")
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}")
                print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {list(data['endpoints'].keys())}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞
        order_data = {
            "items": [
                {
                    "audiobook_id": 1,
                    "quantity": 2
                },
                {
                    "audiobook_id": 2,
                    "quantity": 1
                }
            ]
        }
        
        try:
            print(f"   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: {json.dumps(order_data, indent=2)}")
            response = await client.post(f"{orders_url}/api/v1/orders", json=order_data)
            
            if response.status_code == 200:
                order = response.json()
                print("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                print(f"   ID –∑–∞–∫–∞–∑–∞: {order['id']}")
                print(f"   –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order['order_number']}")
                print(f"   –û–±—â–∞—è —Å—É–º–º–∞: {order['total_amount']}")
                print(f"   –°—Ç–∞—Ç—É—Å: {order['status']}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(order['items'])}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
                order_id = order['id']
                
            elif response.status_code == 503:
                print("‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å '–ö–æ—Ä–∑–∏–Ω–∞' –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8002")
                return
                
            elif response.status_code == 400:
                print("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã")
                print(f"   –î–µ—Ç–∞–ª–∏: {response.json()}")
                return
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
            return
        
        # 4. –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        print(f"\n4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID {order_id}...")
        try:
            response = await client.get(f"{orders_url}/api/v1/orders/{order_id}")
            
            if response.status_code == 200:
                order = response.json()
                print("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
                print(f"   –ù–æ–º–µ—Ä: {order['order_number']}")
                print(f"   –°—É–º–º–∞: {order['total_amount']}")
                print(f"   –°—Ç–∞—Ç—É—Å: {order['status']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–π
                print("   –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞:")
                for i, item in enumerate(order['items'], 1):
                    print(f"     {i}. {item['title']} x {item['quantity']} = {item['total_price']}")
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
        
        # 5. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        print("\n5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤...")
        try:
            response = await client.get(f"{orders_url}/api/v1/orders?limit=10")
            
            if response.status_code == 200:
                orders = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
                
                if orders:
                    print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:")
                    for i, order in enumerate(orders[:3], 1):
                        print(f"     {i}. {order['order_number']} - {order['total_amount']} - {order['status']}")
                        
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")
        
        # 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        print(f"\n6Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {order_id}...")
        try:
            new_status = "confirmed"
            response = await client.put(f"{orders_url}/api/v1/orders/{order_id}/status?status={new_status}")
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                print(f"   –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {result['new_status']}")
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
    
    print("\n" + "=" * 60)
    print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìö –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
    print("   - API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8003/docs")
    print("   - ReDoc –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8003/redoc")
    print("   - Health check: http://localhost:8003/health")


async def test_with_mock_cart():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Å –º–æ–∫–æ–º –∫–æ—Ä–∑–∏–Ω—ã (–¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"""
    
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –º–æ–∫–æ–º –∫–æ—Ä–∑–∏–Ω—ã...")
    print("‚ö†Ô∏è  –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–∫–∞–∂–µ—Ç, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç —Å –º–æ–∫–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    print("   (–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å '–ö–æ—Ä–∑–∏–Ω–∞' –Ω–∞ –ø–æ—Ä—Ç—É 8002)")


if __name__ == "__main__":
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ '–ó–∞–∫–∞–∑—ã'")
    print("üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
    print("   - –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å '–ó–∞–∫–∞–∑—ã' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8003")
    print("   - –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å '–ö–æ—Ä–∑–∏–Ω–∞' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8002")
    print("   - –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å '–ö–∞—Ç–∞–ª–æ–≥' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8001")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    asyncio.run(test_orders_service())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å –º–æ–∫–æ–º
    asyncio.run(test_with_mock_cart()) 