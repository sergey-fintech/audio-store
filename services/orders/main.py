# –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ –∏ –∫–æ—Ä–∑–∏–Ω–æ–π –ø–æ–∫—É–ø–æ–∫, –≤–∫–ª—é—á–∞—è:
# - –ö–æ—Ä–∑–∏–Ω—É –ø–æ–∫—É–ø–æ–∫ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤)
# - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–æ–≤
# - –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–æ–∫
# - –ò—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# - –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
# - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
# - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–æ–≤

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å Python
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from sqlalchemy.exc import SQLAlchemyError
import httpx
from contextlib import asynccontextmanager

from database.connection import get_db
from database.models import Order, OrderItem
from schemas import (
    OrderCreateRequest, 
    OrderResponse, 
    OrderItemResponse, 
    ErrorResponse,
    CartCalculationResponse
)
from services import OrderService


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("üöÄ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å '–ó–∞–∫–∞–∑—ã' –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    yield
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    print("üõë –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å '–ó–∞–∫–∞–∑—ã' –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")


app = FastAPI(
    title="–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –ó–∞–∫–∞–∑—ã",
    description="–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏",
    version="1.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "message": "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å '–ó–∞–∫–∞–∑—ã' —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "version": "1.0.0",
        "endpoints": {
            "create_order": "POST /api/v1/orders",
            "get_order": "GET /api/v1/orders/{order_id}",
            "get_orders": "GET /api/v1/orders",
            "health": "GET /health"
        }
    }


@app.get("/health")
async def health_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": "orders",
        "timestamp": "2024-01-01T00:00:00Z"
    }


@app.post("/api/v1/orders", response_model=OrderResponse)
async def create_order(
    request: OrderCreateRequest,
    db: Session = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.
    
    –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:
    1. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç "—Å—ã—Ä–æ–π" —Å–æ—Å—Ç–∞–≤ –∫–æ—Ä–∑–∏–Ω—ã (—Å–ø–∏—Å–æ–∫ ID –∞—É–¥–∏–æ–∫–Ω–∏–≥ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    2. –û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É "–ö–æ—Ä–∑–∏–Ω–∞" –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    3. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
    4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
        order_service = OrderService(db)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = [
            {
                "audiobook_id": item.audiobook_id,
                "quantity": item.quantity
            }
            for item in request.items
        ]
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∫–æ—Ä–∑–∏–Ω—ã
        try:
            cart_response = await order_service.validate_cart_with_cart_service(cart_items)
        except httpx.HTTPStatusError as e:
            raise HTTPException(
                status_code=503,
                detail=f"–°–µ—Ä–≤–∏—Å –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        if not cart_response.items:
            raise HTTPException(
                status_code=400,
                detail="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        try:
            order = order_service.create_order_transaction(cart_response)
        except SQLAlchemyError as e:
            raise HTTPException(
                status_code=500,
                detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}"
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
        return OrderResponse(
            id=order.id,
            order_number=order.order_number,
            total_amount=order.total_amount,
            status=order.status,
            items=[
                OrderItemResponse(
                    id=item.id,
                    audiobook_id=item.audiobook_id,
                    title=item.title,
                    price_per_unit=item.price_per_unit,
                    quantity=item.quantity,
                    total_price=item.total_price,
                    created_at=item.created_at
                )
                for item in order.items
            ],
            created_at=order.created_at,
            updated_at=order.updated_at
        )
        
    except HTTPException:
        # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
        raise
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        )


@app.get("/api/v1/orders/{order_id}", response_model=OrderResponse)
async def get_order(order_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑ –ø–æ ID"""
    order_service = OrderService(db)
    order = order_service.get_order_by_id(order_id)
    
    if not order:
        raise HTTPException(
            status_code=404,
            detail=f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    return OrderResponse(
        id=order.id,
        order_number=order.order_number,
        total_amount=order.total_amount,
        status=order.status,
        items=[
            OrderItemResponse(
                id=item.id,
                audiobook_id=item.audiobook_id,
                title=item.title,
                price_per_unit=item.price_per_unit,
                quantity=item.quantity,
                total_price=item.total_price,
                created_at=item.created_at
            )
            for item in order.items
        ],
        created_at=order.created_at,
        updated_at=order.updated_at
    )


@app.get("/api/v1/orders", response_model=list[OrderResponse])
async def get_orders(
    limit: int = 100,
    offset: int = 0,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
    order_service = OrderService(db)
    orders = order_service.get_all_orders(limit=limit, offset=offset)
    
    return [
        OrderResponse(
            id=order.id,
            order_number=order.order_number,
            total_amount=order.total_amount,
            status=order.status,
            items=[
                OrderItemResponse(
                    id=item.id,
                    audiobook_id=item.audiobook_id,
                    title=item.title,
                    price_per_unit=item.price_per_unit,
                    quantity=item.quantity,
                    total_price=item.total_price,
                    created_at=item.created_at
                )
                for item in order.items
            ],
            created_at=order.created_at,
            updated_at=order.updated_at
        )
        for order in orders
    ]


@app.put("/api/v1/orders/{order_id}/status")
async def update_order_status(
    order_id: int,
    status: str,
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    order_service = OrderService(db)
    order = order_service.update_order_status(order_id, status)
    
    if not order:
        raise HTTPException(
            status_code=404,
            detail=f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    return {
        "message": f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}'",
        "order_id": order_id,
        "new_status": status
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8003)
