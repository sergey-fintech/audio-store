"""
AI Recommender Service - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Core Domain AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

–≠—Ç–æ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —è–≤–ª—è–µ—Ç—Å—è Core Domain –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∞—É–¥–∏–æ–∫–Ω–∏–≥.
–û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
"""

import os
from typing import Dict, Any
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import requests
import asyncio
import openai
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="AI Recommender Service",
    description="Core Domain —Å–µ—Ä–≤–∏—Å –¥–ª—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∞—É–¥–∏–æ–∫–Ω–∏–≥",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è OpenRouter
client = openai.OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=os.getenv("OPENROUTER_API_KEY"),
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CATALOG_SERVICE_URL = "http://localhost:8002"  # URL –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ catalog
PROMPTS_SERVICE_URL = "http://localhost:8006"  # URL –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ prompts-manager

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ LLM
AVAILABLE_MODELS = {
    "gemini-pro": "google/gemini-pro-1.5",
    "gemini-flash": "google/gemini-flash-1.5-8b", 
    "claude-3": "anthropic/claude-3.5-sonnet",
    "gpt-4": "openai/gpt-4-turbo",
    "llama-3": "meta-llama/llama-3-8b-instruct"
}


# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class RecommendationRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    prompt: str
    model: str = "gemini-pro"  # –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


class DescriptionGenerationRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–ø–∏—Å–∞–Ω–∏—è"""
    model: str = "gemini-pro"  # –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


class DescriptionGenerationResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    product_id: int
    generated_description: str
    model: str
    model_alias: str
    success: bool


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def fetch_prompt_from_service(prompt_name: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –∏–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ prompts-manager.
    –≠—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ (Anti-Corruption Layer).
    """
    try:
        url = f"{PROMPTS_SERVICE_URL}/prompts/name/{prompt_name}"
        print(f"üîç –ó–∞–ø—Ä–æ—Å –∫ Prompts Service: {url}")
        
        def make_request():
            return requests.get(url, timeout=10.0)
        
        response = await asyncio.to_thread(make_request)
        print(f"üì° –û—Ç–≤–µ—Ç –æ—Ç Prompts Service: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            prompt_content = data.get('content', '')
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–º–ø—Ç '{prompt_name}' –¥–ª–∏–Ω–æ–π {len(prompt_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            return prompt_content
        elif response.status_code == 404:
            raise HTTPException(
                status_code=404,
                detail=f"–ü—Ä–æ–º–ø—Ç '{prompt_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ prompts-manager"
            )
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text[:100]}")
            raise HTTPException(
                status_code=503,
                detail=f"Prompts —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status_code}: {response.text}"
            )
        
    except requests.exceptions.Timeout:
        raise HTTPException(
            status_code=503,
            detail="Prompts —Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥"
        )
    except requests.exceptions.RequestException as e:
        raise HTTPException(
            status_code=503,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ prompts —Å–µ—Ä–≤–∏—Å—É: {str(e)}"
        )
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {str(e)}"
        )


async def fetch_audiobooks_from_catalog() -> list:  
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ–∫–Ω–∏–≥ –∏–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ catalog.
    –≠—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ (Anti-Corruption Layer).
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç catalog —Å–µ—Ä–≤–∏—Å–∞ (–∫–∞–∫ –≤ cart —Å–µ—Ä–≤–∏—Å–µ)
        url = f"{CATALOG_SERVICE_URL}/api/v1/audiobooks"
        print(f"üîç –ó–∞–ø—Ä–æ—Å –∫ Catalog Service: {url}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º requests –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
        def make_request():
            return requests.get(url, timeout=10.0)
        
        response = await asyncio.to_thread(make_request)
        print(f"üì° –û—Ç–≤–µ—Ç –æ—Ç Catalog Service: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {len(data) if isinstance(data, list) else '–Ω–µ —Å–ø–∏—Å–æ–∫'}")
            if isinstance(data, list) and len(data) > 0:
                return data
            elif isinstance(data, dict):
                print(f"üìù –û—Ç–≤–µ—Ç –Ω–µ —Å–ø–∏—Å–æ–∫: {data}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text[:100]}")
            raise HTTPException(
                status_code=503,
                detail=f"Catalog —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status_code}: {response.text}"
            )
        
    except requests.exceptions.Timeout:
        raise HTTPException(
            status_code=503,
            detail="Catalog —Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥"
        )
    except requests.exceptions.HTTPError as e:
        raise HTTPException(
            status_code=503,
            detail=f"Catalog —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {e.response.status_code}: {e.response.text}"
        )
    except requests.exceptions.RequestException as e:
        raise HTTPException(
            status_code=503,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ catalog —Å–µ—Ä–≤–∏—Å—É: {str(e)}"
        )
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        )


async def create_system_prompt(audiobooks: list, user_prompt: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ–º–ø—Ç –∏–∑ prompts-manager.
    –≠—Ç–æ –Ω–∞—à–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å - Core Domain –ª–æ–≥–∏–∫–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ prompts-manager
    base_prompt = await fetch_prompt_from_service("recommendation_prompt")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º JSON —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∫–Ω–∏–≥
    books_json = []
    for book in audiobooks:
        book_data = {
            "id": book['id'],
            "title": book['title'],
            "author": book['author']['name'] if book['author'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω',
            "description": book['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
            "price": book['price'],
            "categories": [cat['name'] for cat in book['categories']] if book['categories'] else []
        }
        books_json.append(book_data)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
    system_prompt = base_prompt.format(
        user_preferences=user_prompt,
        available_books=books_json
    )
    
    return system_prompt


async def fetch_audiobook_by_id(product_id: int) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –ø–æ ID –∏–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ catalog.
    –≠—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ (Anti-Corruption Layer).
    """
    try:
        url = f"{CATALOG_SERVICE_URL}/api/v1/audiobooks/{product_id}"
        print(f"üîç –ó–∞–ø—Ä–æ—Å –∫ Catalog Service –¥–ª—è –∫–Ω–∏–≥–∏ {product_id}: {url}")
        
        def make_request():
            return requests.get(url, timeout=10.0)
        
        response = await asyncio.to_thread(make_request)
        print(f"üì° –û—Ç–≤–µ—Ç –æ—Ç Catalog Service: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏: {data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            return data
        elif response.status_code == 404:
            raise HTTPException(
                status_code=404,
                detail=f"–ê—É–¥–∏–æ–∫–Ω–∏–≥–∞ —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text[:100]}")
            raise HTTPException(
                status_code=503,
                detail=f"Catalog —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status_code}: {response.text}"
            )
        
    except requests.exceptions.Timeout:
        raise HTTPException(
            status_code=503,
            detail="Catalog —Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥"
        )
    except requests.exceptions.RequestException as e:
        raise HTTPException(
            status_code=503,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ catalog —Å–µ—Ä–≤–∏—Å—É: {str(e)}"
        )
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        )


async def create_description_prompt(audiobook: dict) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ–º–ø—Ç –∏–∑ prompts-manager.
    –≠—Ç–æ –Ω–∞—à–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å - Core Domain –ª–æ–≥–∏–∫–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ prompts-manager
    base_prompt = await fetch_prompt_from_service("description_prompt")
    
    title = audiobook.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    author_name = audiobook.get('author', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω') if audiobook.get('author') else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
    categories = [cat.get('name', '') for cat in audiobook.get('categories', [])]
    current_description = audiobook.get('description', '')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
    system_prompt = base_prompt.format(
        title=title,
        author=author_name,
        genre=', '.join(categories) if categories else '–ù–µ —É–∫–∞–∑–∞–Ω',
        theme=current_description if current_description else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
    )
    
    return system_prompt


async def update_audiobook_description(product_id: int, description: str) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–µ catalog.
    –≠—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ (Anti-Corruption Layer).
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PUT –º–µ—Ç–æ–¥ —Å –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º–æ–π AudiobookUpdate.
    """
    try:
        url = f"{CATALOG_SERVICE_URL}/api/v1/audiobooks/{product_id}"
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–∏–≥–∏ {product_id}: {url}")
        
        # –°–æ–∑–¥–∞–µ–º payload —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ AudiobookUpdate
        # –í—Å–µ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã, –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ description
        payload = {
            "description": description
        }
        
        def make_request():
            return requests.put(url, json=payload, timeout=10.0)
        
        response = await asyncio.to_thread(make_request)
        print(f"üì° –û—Ç–≤–µ—Ç –æ—Ç Catalog Service –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        if response.status_code == 200:
            print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–Ω–∏–≥–∏ {product_id}")
            return True
        elif response.status_code == 404:
            raise HTTPException(
                status_code=404,
                detail=f"–ê—É–¥–∏–æ–∫–Ω–∏–≥–∞ —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {response.status_code}: {response.text[:100]}")
            raise HTTPException(
                status_code=503,
                detail=f"Catalog —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {response.status_code}: {response.text}"
            )
        
    except requests.exceptions.Timeout:
        raise HTTPException(
            status_code=503,
            detail="Catalog —Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥"
        )
    except requests.exceptions.RequestException as e:
        raise HTTPException(
            status_code=503,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ catalog —Å–µ—Ä–≤–∏—Å—É: {str(e)}"
        )
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}"
        )


# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/")
def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "AI Recommender Service is running",
        "version": "1.0.0",
        "description": "Core Domain —Å–µ—Ä–≤–∏—Å –¥–ª—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∞—É–¥–∏–æ–∫–Ω–∏–≥"
    }

@app.get("/api/v1/models")
def get_available_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    return {
        "available_models": AVAILABLE_MODELS,
        "default_model": "gemini-pro",
        "description": "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
    }

@app.get("/health")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    api_key = os.getenv("OPENROUTER_API_KEY")
    return {
        "status": "healthy",
        "service": "AI Recommender Service",
        "version": "1.0.0",
        "api_key_configured": bool(api_key),
        "api_key_length": len(api_key) if api_key else 0,
        "api_key_prefix": api_key[:10] + "..." if api_key and len(api_key) > 10 else "None"
    }

@app.post("/api/v1/recommendations/generate")
async def generate_recommendations(request: RecommendationRequest):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞—É–¥–∏–æ–∫–Ω–∏–≥.
    
    –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç Core Domain, –∫–æ—Ç–æ—Ä—ã–π:
    1. –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ catalog –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤)
    2. –°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–Ω–∞—à–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å)
    3. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ "–∫–∞–∫ –µ—Å—Ç—å"
    """
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∞—É–¥–∏–æ–∫–Ω–∏–≥ –∏–∑ catalog –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ (Anti-Corruption Layer)
    audiobooks = await fetch_audiobooks_from_catalog()
    
    if not audiobooks:
        raise HTTPException(
            status_code=404,
            detail="–ö–∞—Ç–∞–ª–æ–≥ –∞—É–¥–∏–æ–∫–Ω–∏–≥ –ø—É—Å—Ç"
        )
    
    # 2. –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–Ω–∞—à–∞ Core Domain –ª–æ–≥–∏–∫–∞)
    system_prompt = await create_system_prompt(audiobooks, request.prompt)
    
    # 3. –í—ã–∑—ã–≤–∞–µ–º LLM —á–µ—Ä–µ–∑ OpenRouter
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
        model_name = AVAILABLE_MODELS.get(request.model, AVAILABLE_MODELS["gemini-pro"])
        print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {request.model} -> {model_name}")
        
        response = client.chat.completions.create(
            model=model_name,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": request.prompt}
            ],
            max_tokens=1500,
            temperature=0.7
        )
        
        # 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ "–∫–∞–∫ –µ—Å—Ç—å"
        return {
            "recommendations": response.choices[0].message.content,
            "model": model_name,
            "model_alias": request.model,
            "total_books_analyzed": len(audiobooks)
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LLM: {str(e)}"
        )


@app.post("/api/v1/recommendations/generate-description/{product_id}", response_model=DescriptionGenerationResponse)
async def generate_description(product_id: int, request: DescriptionGenerationRequest):
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ "AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è".
    
    –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏:
    1. –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –∏–∑ catalog —Å–µ—Ä–≤–∏—Å–∞
    2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é LLM
    3. –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤ catalog —Å–µ—Ä–≤–∏—Å–µ
    4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∏–µ–Ω—Ç—É
    
    –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏.
    """
    
    try:
        print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–Ω–∏–≥–∏ {product_id}")
        
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –∏–∑ catalog —Å–µ—Ä–≤–∏—Å–∞
        print(f"üìñ –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏ {product_id}")
        audiobook = await fetch_audiobook_by_id(product_id)
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
        print(f"ü§ñ –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è LLM")
        system_prompt = await create_description_prompt(audiobook)
        
        # –®–∞–≥ 3: –í—ã–∑—ã–≤–∞–µ–º LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è
        print(f"‚ö° –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é LLM")
        model_name = AVAILABLE_MODELS.get(request.model, AVAILABLE_MODELS["gemini-pro"])
        print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {request.model} -> {model_name}")
        
        response = client.chat.completions.create(
            model=model_name,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": "–°–æ–∑–¥–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏."}
            ],
            max_tokens=500,
            temperature=0.7
        )
        
        generated_description = response.choices[0].message.content.strip()
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª–∏–Ω–æ–π {len(generated_description)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –®–∞–≥ 4: –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ catalog —Å–µ—Ä–≤–∏—Å–µ
        print(f"üîÑ –®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ catalog —Å–µ—Ä–≤–∏—Å–µ")
        update_success = await update_audiobook_description(product_id, generated_description)
        
        if not update_success:
            raise HTTPException(
                status_code=500,
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤ catalog —Å–µ—Ä–≤–∏—Å–µ"
            )
        
        print(f"üéâ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –∫–Ω–∏–≥–∏ {product_id}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return DescriptionGenerationResponse(
            product_id=product_id,
            generated_description=generated_description,
            model=model_name,
            model_alias=request.model,
            success=True
        )
        
    except HTTPException:
        # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}"
        )


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8005)
