#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ "–ö–æ—Ä–∑–∏–Ω–∞"
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
"""

import httpx
import asyncio
import json
from datetime import datetime

async def demo_cart_calculation():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
    """
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ '–ö–æ—Ä–∑–∏–Ω–∞'")
    print("=" * 60)
    
    # –ü—Ä–∏–º–µ—Ä 1: –ö–æ—Ä–∑–∏–Ω–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    print("\nüìã –ü—Ä–∏–º–µ—Ä 1: –†–∞—Å—á–µ—Ç –∫–æ—Ä–∑–∏–Ω—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏")
    cart_data_1 = {
        "items": [
            {"audiobook_id": 1, "quantity": 2},
            {"audiobook_id": 2, "quantity": 1},
            {"audiobook_id": 3, "quantity": 3}
        ]
    }
    
    await test_cart_request(cart_data_1, "–ö–æ—Ä–∑–∏–Ω–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏")
    
    # –ü—Ä–∏–º–µ—Ä 2: –ö–æ—Ä–∑–∏–Ω–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    print("\nüìã –ü—Ä–∏–º–µ—Ä 2: –†–∞—Å—á–µ—Ç –∫–æ—Ä–∑–∏–Ω—ã —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏")
    cart_data_2 = {
        "items": [
            {"audiobook_id": 1, "quantity": 1},
            {"audiobook_id": 999, "quantity": 2},  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
            {"audiobook_id": 888, "quantity": 1}   # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
        ]
    }
    
    await test_cart_request(cart_data_2, "–ö–æ—Ä–∑–∏–Ω–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏")
    
    # –ü—Ä–∏–º–µ—Ä 3: –ü—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞
    print("\nüìã –ü—Ä–∏–º–µ—Ä 3: –ü—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞")
    cart_data_3 = {
        "items": []
    }
    
    await test_cart_request(cart_data_3, "–ü—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞")
    
    # –ü—Ä–∏–º–µ—Ä 4: –ö–æ—Ä–∑–∏–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    print("\nüìã –ü—Ä–∏–º–µ—Ä 4: –ö–æ—Ä–∑–∏–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏")
    cart_data_4 = {
        "items": [
            {"audiobook_id": 999, "quantity": 1},
            {"audiobook_id": 888, "quantity": 2}
        ]
    }
    
    await test_cart_request(cart_data_4, "–ö–æ—Ä–∑–∏–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏")

async def test_cart_request(cart_data, description):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∫–æ—Ä–∑–∏–Ω—ã
    """
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {description}")
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: {json.dumps(cart_data, indent=2, ensure_ascii=False)}")
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            response = await client.post(
                "http://localhost:8001/api/v1/cart/calculate",
                json=cart_data
            )
            
            print(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:")
                print(json.dumps(result, indent=2, ensure_ascii=False))
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                total_items = len(result["items"])
                total_price = result["total_price"]
                print(f"üìä –ê–Ω–∞–ª–∏–∑: {total_items} —Ç–æ–≤–∞—Ä–æ–≤, –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price}")
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
                
        except httpx.RequestError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

async def check_service_health():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    """
    print("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞...")
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get("http://localhost:8001/health")
            if response.status_code == 200:
                health_data = response.json()
                print(f"‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç: {health_data}")
                return True
            else:
                print(f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
        except httpx.RequestError:
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏)")
            return False

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    """
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ '–ö–æ—Ä–∑–∏–Ω–∞'")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
    if not await check_service_health():
        print("\n‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å '–ö–æ—Ä–∑–∏–Ω–∞' –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8001")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python run_app.py")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    await demo_cart_calculation()
    
    print("\n" + "=" * 60)
    print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:")
    print("   - –¢–æ–≤–∞—Ä—ã —Å ID 999, 888 –∏ –¥—Ä—É–≥–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è")
    print("   - –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    print("   - –í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∑–∞–Ω–æ –≤ –ø–æ–ª–µ 'calculated_at'")

if __name__ == "__main__":
    asyncio.run(main()) 