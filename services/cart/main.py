from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional
import httpx
import asyncio
from datetime import datetime

app = FastAPI(
    title="–ö–æ—Ä–∑–∏–Ω–∞ API",
    description="–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# DTO –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
class CartItemInput(BaseModel):
    audiobook_id: int
    quantity: int

class CartItemOutput(BaseModel):
    audiobook_id: int
    title: str
    price_per_unit: float
    quantity: int
    total_price: float

class CartCalculationRequest(BaseModel):
    items: List[CartItemInput]

class CartCalculationResponse(BaseModel):
    items: List[CartItemOutput]
    total_price: float
    calculated_at: datetime

# –ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ "–ö–∞—Ç–∞–ª–æ–≥"
class AudiobookInfo(BaseModel):
    id: int
    title: str
    price: float
    description: Optional[str] = None
    cover_image_url: Optional[str] = None
    author: Optional[dict] = None
    categories: Optional[List[dict]] = None

async def get_audiobook_info(audiobook_id: int, client: httpx.AsyncClient) -> Optional[AudiobookInfo]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ–∫–Ω–∏–≥–µ –∏–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ "–ö–∞—Ç–∞–ª–æ–≥"
    """
    url = f"http://localhost:8002/api/v1/audiobooks/{audiobook_id}"
    print(f"üîç –ó–∞–ø—Ä–æ—Å –∫ Catalog Service: {url}")
    
    try:
        response = await client.get(url)
        print(f"üì° –û—Ç–≤–µ—Ç –æ—Ç Catalog Service –¥–ª—è ID {audiobook_id}: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        if response.status_code == 404:
            # –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            print(f"‚ùå –ö–Ω–∏–≥–∞ —Å ID {audiobook_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
            return None
        elif response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ö–Ω–∏–≥–∞ —Å ID {audiobook_id} –Ω–∞–π–¥–µ–Ω–∞: {data.get('title', 'Unknown')}")
            return AudiobookInfo(**data)
        else:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏–æ–∫–Ω–∏–≥–µ {audiobook_id}: {response.status_code}")
            return None
            
    except httpx.RequestError as e:
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏–æ–∫–Ω–∏–≥–µ {audiobook_id}: {e}")
        return None
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏–æ–∫–Ω–∏–≥–µ {audiobook_id}: {e}")
        return None

@app.post("/api/v1/cart/calculate", response_model=CartCalculationResponse)
async def calculate_cart(request: CartCalculationRequest):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    
    - –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∞—É–¥–∏–æ–∫–Ω–∏–≥–µ –∏–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ "–ö–∞—Ç–∞–ª–æ–≥"
    - –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    - –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã
    """
    
    if not request.items:
        return CartCalculationResponse(
            items=[],
            total_price=0.0,
            calculated_at=datetime.now()
        )
    
    # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    async with httpx.AsyncClient(timeout=10.0) as client:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [
            get_audiobook_info(item.audiobook_id, client) 
            for item in request.items
        ]
        
        audiobook_infos = await asyncio.gather(*tasks, return_exceptions=True)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    cart_items = []
    total_price = 0.0
    
    print(f"üõí –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(request.items)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ")
    
    for item, audiobook_info in zip(request.items, audiobook_infos):
        print(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ ID {item.audiobook_id}: {audiobook_info}")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –≤—ã–∑–≤–∞–ª–∏ –æ—à–∏–±–∫—É
        if audiobook_info is None or isinstance(audiobook_info, Exception):
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä ID {item.audiobook_id} (–Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞)")
            continue
            
        item_total = audiobook_info.price * item.quantity
        
        cart_item = CartItemOutput(
            audiobook_id=item.audiobook_id,
            title=audiobook_info.title,
            price_per_unit=audiobook_info.price,
            quantity=item.quantity,
            total_price=item_total
        )
        
        cart_items.append(cart_item)
        total_price += item_total
    
    return CartCalculationResponse(
        items=cart_items,
        total_price=total_price,
        calculated_at=datetime.now()
    )

@app.get("/health")
async def health_check():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
    """
    return {"status": "healthy", "service": "cart"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8004)
