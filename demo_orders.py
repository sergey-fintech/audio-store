#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ '–ó–∞–∫–∞–∑—ã' —Å —Ç–æ—á–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –∫–æ—Ä–∑–∏–Ω—ã
"""

import sys
import os
import asyncio
import httpx
import json
import time

# –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)

async def check_service_health(url, name, timeout=5):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        async with httpx.AsyncClient(timeout=timeout) as client:
            response = await client.get(f"{url}/health")
            if response.status_code == 200:
                return True, response.json()
            else:
                return False, f"HTTP {response.status_code}"
    except Exception as e:
        return False, str(e)

async def wait_for_services():
    """–ñ–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    services = [
        ("http://localhost:8001", "–ö–∞—Ç–∞–ª–æ–≥"),
        ("http://localhost:8002", "–ö–æ—Ä–∑–∏–Ω–∞"), 
        ("http://localhost:8003", "–ó–∞–∫–∞–∑—ã")
    ]
    
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    for attempt in range(30):  # 30 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 2 —Å–µ–∫—É–Ω–¥—ã = 1 –º–∏–Ω—É—Ç–∞
        all_ready = True
        status_info = []
        
        for url, name in services:
            is_healthy, info = await check_service_health(url, name, timeout=2)
            if is_healthy:
                status_info.append(f"‚úÖ {name}")
            else:
                status_info.append(f"‚ùå {name} ({info})")
                all_ready = False
        
        print(f"\r   –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {' | '.join(status_info)}", end="")
        
        if all_ready:
            print("\n‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã!")
            return True
            
        await asyncio.sleep(2)
    
    print(f"\n‚ùå –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å –∑–∞ {30 * 2} —Å–µ–∫—É–Ω–¥")
    return False

async def test_cart_calculation_detailed():
    """–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    print("\nüß™ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã")
    print("=" * 60)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            print("üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ–∫–Ω–∏–≥ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö 5 –∫–Ω–∏–≥–∞—Ö
            for book_id in range(1, 6):
                response = await client.get(f"http://localhost:8001/api/v1/audiobooks/{book_id}")
                if response.status_code == 200:
                    book = response.json()
                    print(f"   üìñ ID {book_id}: {book['title']} - {book['price']} —Ä—É–±. (–∞–≤—Ç–æ—Ä: {book['author']['name'] if book['author'] else 'N/A'})")
                else:
                    print(f"   ‚ùå ID {book_id}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            print("\nüõí –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∫–æ—Ä–∑–∏–Ω—ã...")
            cart_data = {
                "items": [
                    {"audiobook_id": 1, "quantity": 2},
                    {"audiobook_id": 2, "quantity": 1}
                ]
            }
            
            print(f"üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É: {json.dumps(cart_data, indent=2, ensure_ascii=False)}")
            
            response = await client.post(
                "http://localhost:8002/api/v1/cart/calculate",
                json=cart_data
            )
            
            print(f"\nüìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–∏—Å–∞ –∫–æ—Ä–∑–∏–Ω—ã (—Å—Ç–∞—Ç—É—Å {response.status_code}):")
            
            if response.status_code == 200:
                result = response.json()
                print(json.dumps(result, indent=2, ensure_ascii=False))
                
                if result['items']:
                    print("\nüí∞ –¢–û–ß–ù–´–ô –†–ê–°–ß–ï–¢ –ö–û–†–ó–ò–ù–´:")
                    total_check = 0
                    for item in result['items']:
                        item_total = item['price_per_unit'] * item['quantity']
                        total_check += item_total
                        print(f"   üìñ {item['title']}")
                        print(f"      üíµ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {item['price_per_unit']} —Ä—É–±.")
                        print(f"      üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']}")
                        print(f"      üßÆ –†–∞—Å—á–µ—Ç: {item['price_per_unit']} √ó {item['quantity']} = {item_total} —Ä—É–±.")
                        print(f"      ‚úÖ –ò—Ç–æ–≥–æ –∑–∞ —Ç–æ–≤–∞—Ä: {item['total_price']} —Ä—É–±.")
                    
                    print(f"\nüéØ –û–ë–©–ê–Ø –°–£–ú–ú–ê –ö–û–†–ó–ò–ù–´: {result['total_price']} —Ä—É–±.")
                    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {total_check} —Ä—É–±.")
                    
                    if abs(total_check - result['total_price']) < 0.01:
                        print("‚úÖ –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ!")
                        
                    return result
                else:
                    print("‚ö†Ô∏è  –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ - —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
                    return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
                return None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        return None

async def test_order_creation_detailed(cart_result=None):
    """–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    print("\nüõí –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    print("=" * 60)
    
    order_data = {
        "items": [
            {"audiobook_id": 1, "quantity": 2},
            {"audiobook_id": 2, "quantity": 1}
        ]
    }
    
    try:
        async with httpx.AsyncClient(timeout=15) as client:
            print(f"üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑: {json.dumps(order_data, indent=2, ensure_ascii=False)}")
            
            response = await client.post(
                "http://localhost:8003/api/v1/orders",
                json=order_data
            )
            
            print(f"\nüìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–∫–∞–∑–æ–≤ (—Å—Ç–∞—Ç—É—Å {response.status_code}):")
            
            if response.status_code == 200:
                result = response.json()
                print(json.dumps(result, indent=2, ensure_ascii=False))
                
                print("\nüì¶ –ê–ù–ê–õ–ò–ó –°–û–ó–î–ê–ù–ù–û–ì–û –ó–ê–ö–ê–ó–ê:")
                print(f"   üÜî ID –∑–∞–∫–∞–∑–∞: {result['id']}")
                print(f"   üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {result['order_number']}")
                print(f"   üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {result['total_amount']} —Ä—É–±.")
                print(f"   üìä –°—Ç–∞—Ç—É—Å: {result['status']}")
                print(f"   üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {result['created_at']}")
                print(f"   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {len(result['items'])}")
                
                if result['items']:
                    print("\nüìã –î–ï–¢–ê–õ–ò –ü–û–ó–ò–¶–ò–ô –ó–ê–ö–ê–ó–ê:")
                    order_total = 0
                    for i, item in enumerate(result['items'], 1):
                        item_total = float(item['price_per_unit']) * item['quantity']
                        order_total += item_total
                        print(f"   {i}. üìñ {item['title']}")
                        print(f"      üíµ –¶–µ–Ω–∞: {item['price_per_unit']} —Ä—É–±.")
                        print(f"      üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']}")
                        print(f"      üßÆ –†–∞—Å—á–µ—Ç: {item['price_per_unit']} √ó {item['quantity']} = {item_total} —Ä—É–±.")
                        print(f"      ‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –≤ –∑–∞–∫–∞–∑–µ: {item['total_price']} —Ä—É–±.")
                    
                    print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –°–£–ú–ú–ê –ó–ê–ö–ê–ó–ê: {result['total_amount']} —Ä—É–±.")
                    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {order_total} —Ä—É–±.")
                    
                    if abs(order_total - float(result['total_amount'])) < 0.01:
                        print("‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–∫–∞–∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –∑–∞–∫–∞–∑–∞!")
                    
                    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
                    if cart_result:
                        print(f"\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –ö–û–†–ó–ò–ù–´ –ò –ó–ê–ö–ê–ó–ê:")
                        print(f"   üõí –†–∞—Å—á–µ—Ç –∫–æ—Ä–∑–∏–Ω—ã: {cart_result['total_price']} —Ä—É–±.")
                        print(f"   üì¶ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {result['total_amount']} —Ä—É–±.")
                        if abs(cart_result['total_price'] - float(result['total_amount'])) < 0.01:
                            print("   ‚úÖ –°—É–º–º—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç! –¶–µ–Ω—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
                        else:
                            print("   ‚ùå –°—É–º–º—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
                
                return result
            else:
                error_detail = response.json() if response.headers.get('content-type', '').startswith('application/json') else response.text
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {error_detail}")
                return None
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–ò–ö–†–û–°–ï–†–í–ò–°–ê '–ó–ê–ö–ê–ó–´'")
    print("üéØ –° —Ç–æ—á–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –∫–æ—Ä–∑–∏–Ω—ã –∏ –∞–Ω–∞–ª–∏–∑–æ–º")
    print("=" * 70)
    
    print("üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
    print("   - –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å '–ó–∞–∫–∞–∑—ã' –Ω–∞ –ø–æ—Ä—Ç—É 8003")
    print("   - –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å '–ö–æ—Ä–∑–∏–Ω–∞' –Ω–∞ –ø–æ—Ä—Ç—É 8002")
    print("   - –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å '–ö–∞—Ç–∞–ª–æ–≥' –Ω–∞ –ø–æ—Ä—Ç—É 8001")
    print()
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    if not await wait_for_services():
        print("\nüí• –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python start_services.py")
        return 1
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∫–æ—Ä–∑–∏–Ω—ã
    cart_result = await test_cart_calculation_detailed()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order_result = await test_order_creation_detailed(cart_result)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n" + "=" * 70)
    if cart_result and order_result:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:")
        print(f"   üõí –ö–æ—Ä–∑–∏–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {cart_result['total_price']} —Ä—É–±.")
        print(f"   üì¶ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: {order_result['order_number']}")
        print(f"   üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order_result['total_amount']} —Ä—É–±.")
        print(f"   üìÖ –í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞: {cart_result['calculated_at']}")
        print(f"   üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(order_result['items'])}")
        
        print("\n‚úÖ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("   - –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("   - –†–∞—Å—á–µ—Ç—ã —Ç–æ—á–Ω—ã–µ")
        print("   - –¶–µ–Ω—ã —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –≤ –∑–∞–∫–∞–∑–µ")
        
    else:
        print("üí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!")
        if not cart_result:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º –∫–æ—Ä–∑–∏–Ω—ã")
            print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –∫–æ—Ä–∑–∏–Ω—ã")
        if not order_result:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞")
            print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∑–∞–∫–∞–∑–æ–≤")
    
    print("\nüìö –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
    print("   - API –ó–∞–∫–∞–∑—ã: http://localhost:8003/docs")
    print("   - API –ö–æ—Ä–∑–∏–Ω–∞: http://localhost:8002/docs")
    print("   - API –ö–∞—Ç–∞–ª–æ–≥: http://localhost:8001/docs")
    
    return 0 if (cart_result and order_result) else 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code) 